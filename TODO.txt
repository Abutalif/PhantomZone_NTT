1. Tests
    1. [DONE] Forward - Inverse check.
        1. [DONE] Known numbers - Lazy.
        2. [DONE] Known numbers - Greedy.
        3. [DONE] Random set - Lazy.
        4. [DONE] Random set - Greedy.
    2. Polynomial multiplication.
        1. [DONE] Known numbers - Lazy.
        2. [DONE] Known numbers - Greedy.
        3. [DONE] Random set - Lazy.
        4. [DONE] Random set - Greedy.
        5. [DONE] Schoolbook formula negacyclic multiplication.
    3. Internal structure check.
        1. Check for ring integrity (every value < prime modulus).
        2. Looking for primitive roots.
        3. Modular operations.
    4. [DONE] Add test for default.
        1. [DONE] Polynomial multiplication.
        2. [DONE] Forward - Inverse check.

2. [DONE] Benchmarking: The same as tests, but aligned to provided benchmarking criterions.

3. [DONE] Lazy-calculation (2q) optimization:

4. CPU instructions optimization.

5. Special Prime optimization.

6. [DONE] README - Explain what you have done, what resources used, why chose certain implementations.

7. Refactoring:
    1. Restructure modules.
    2. Add "assert!()" where needed - modulus ops, builder, etc.
    3. Separate butterfly logic.
    4. [DONE] Implement default.
    5. Add length check for polynomials.
    6. N different random nums for primary root search.


FIXME:
When doing lazy computation (within 2q), the transform does not work.

TODO:
Test out using unsafe uncheked slice element access.